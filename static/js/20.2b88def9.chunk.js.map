{"version":3,"file":"static/js/20.2b88def9.chunk.js","mappings":"4QAkIA,UAzHA,WACE,OAA0BA,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,EAAqEC,EAAAA,UAAwB,GAA7F,eAAgBC,GAAhB,WACA,EAA6DD,EAAAA,SAAe,IAA5E,eAAcE,GAAd,WACMC,GAAUC,EAAAA,EAAAA,MAEhBJ,EAAAA,WAAgB,WACdK,IAAAA,IACc,gEAAgEF,EAAQG,IACnFC,MAAK,SAAAC,GACJT,EAASS,EAASC,MAClBR,GAAW,MAEZS,OAAM,SAAAC,GACL,IAAMC,EACiB,MAAvBD,EAAGH,SAASK,OACR,qBACA,mCACJX,EAASU,GACTX,GAAW,QAGd,CAACE,EAASL,IAIb,IA8BiBgB,EAROC,EAclBC,EAAa,SAACC,GAClB,MAAqB,qBAAVA,GAAmC,OAAVA,GAMtC,OACE,gBAAKC,UAAU,cAAf,SACGpB,GACC,UAAC,IAAD,YACE,SAAC,IAAD,CAAKqB,KAAM,EAAX,UACE,UAAC,IAAD,CACEC,MAAOtB,EAAMuB,KACbH,UAAU,aAFZ,WAIE,mCAAWpB,EAAMwB,UACjB,yBAAI,YACF,iBAAMJ,UAAW,UAAYpB,EAAMe,OAAnC,SAtDI,SAACA,GACjB,IAAIU,EAAgB,GACpB,OAAOV,GACL,IAAK,UACHU,EAAgB,YAChB,MAEF,IAAK,aACHA,EAAgB,sBAChB,MAEF,IAAK,cACHA,EAAgB,oBAOpB,OAAOA,EAoCQC,CAAU1B,EAAMe,cAGrB,yBAAI,kBACF,iBAAMK,WArCIH,EAqCsBjB,EAAM2B,YAnC9CV,EAAc,GAAkB,YAC3BA,EAAc,GAAkB,iBACtB,gBAiCP,SACGjB,EAAM2B,kBAGX,mCAAW3B,EAAMwB,UACjB,iDACCN,EAAWlB,EAAM4B,eAAeC,OAC/B,iCAAS7B,EAAM4B,eAAeC,QAEhC,mDAAwB7B,EAAM4B,eAAeE,WAC5CZ,EAAWlB,EAAM4B,eAAeG,SAC/B,mCAAW/B,EAAM4B,eAAeG,UAElC,qCACA,oDAA4B/B,EAAMgC,QAAQC,wBAC1C,0CAAkBjC,EAAMgC,QAAQE,gBAChC,0CA7CKlB,EA6CoBhB,EAAMgC,QAAQG,aA5CjDC,IAAAA,OAAc,MACKA,GAAAA,CAAOpB,GAAMqB,OAAO,6BA8CjC,SAAC,IAAD,CAAKhB,KAAM,GAAIiB,OAAQ,EAAvB,UACE,0BACE,SAAC,IAAD,CACElB,UAAU,aACVmB,MAAO,IACPC,IAAKxC,EAAMyC,gBAKnB","sources":["pages/asset.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport '../App.css';\nimport { Card, Image, Row, Col } from 'antd';\nimport Moment from 'moment';\nimport { Asset } from \"../types\";\n\nfunction AssetList() {\n  const [asset, setAsset] = useState<Asset>();\n  const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState<boolean>(true);\n  const [error, setError]: [string, (error: string) => void] = React.useState(\"\");\n  const assetId = useParams()\n\n  React.useEffect(() => {\n    axios\n      .get<Asset>(\"https://my-json-server.typicode.com/tractian/fake-api/assets/\"+assetId.id)\n      .then(response => {\n        setAsset(response.data);\n        setLoading(false);\n      })\n      .catch(ex => {\n        const error =\n        ex.response.status === 404\n          ? \"Resource Not found\"\n          : \"An unexpected error has occurred\";\n        setError(error);\n        setLoading(false);\n    });\n  \n  }, [assetId, asset]);\n\n\n\n  const getStatus = (status: string): string => {\n    let currentStatus = ''\n    switch(status) {\n      case 'inAlert': {\n        currentStatus = 'Em Alerta';\n        break;\n      }\n      case 'inDowntime': {\n        currentStatus = 'Em Manutenção';\n        break;\n      }\n      case 'inOperation': {\n        currentStatus = 'Em Operação';\n        break;\n      }\n      default: {\n        break\n      }\n    }\n    return currentStatus\n  }\n\n  const getHealthClass = (healthScore: number): string => {\n    let healthClass = ''\n    if (healthScore > 75) healthClass = 'health-ok'\n    else if (healthScore > 25) healthClass = 'health-warning'\n    else healthClass = 'health-alert'\n    return healthClass\n  }\n\n  const getDate = (date: Date): string => {\n    Moment.locale('br')\n    let formatedDate = Moment(date).format('DD/MM/YY, hh:mm')\n    return formatedDate\n  }\n\n  const checkParam = (param: any): boolean => {\n    if( typeof param !== 'undefined' && param !== null ) {\n      return true\n    }\n    return false\n  }\n\n  return (\n    <div className=\"list-holder\">\n      {asset ? \n        <Row>\n          <Col span={6}>\n            <Card\n              title={asset.name}\n              className='card-asset'\n            >\n              <p>Model: {asset.model}</p>\n              <p>{\"Status: \"}\n                <span className={\"status-\" + asset.status}>\n                  {getStatus(asset.status)}\n                </span>\n              </p>\n              <p>{\"Health Score: \"}\n                <span className={getHealthClass(asset.healthscore)}>\n                  {asset.healthscore}\n                </span>\n              </p>\n              <p>Model: {asset.model}</p>\n              <p>Especificações:</p>\n              {checkParam(asset.specifications.rpm) && \n                <p>RPM: {asset.specifications.rpm}</p>\n              }\n              <p>Temperatura Máxima: {asset.specifications.maxTemp}</p>\n              {checkParam(asset.specifications.power) && \n                <p>Power: {asset.specifications.power}</p>\n              }\n              <p>Metrics:</p>\n              <p>Totla Collectes Uptime: {asset.metrics.totalCollectsUptime}</p>\n              <p>Total Uptime: {asset.metrics.totalUptime}</p>\n              <p>Last Uptime: {getDate(asset.metrics.lastUptimeAt)}</p>\n            </Card>\n          </Col>\n          <Col span={10} offset={4}>\n            <div>\n              <Image\n                className=\"assetImage\"\n                width={300}\n                src={asset.image}\n              />\n            </div>\n          </Col>\n        </Row> :\n        <div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default AssetList;\n"],"names":["useState","asset","setAsset","React","setLoading","setError","assetId","useParams","axios","id","then","response","data","catch","ex","error","status","date","healthScore","checkParam","param","className","span","title","name","model","currentStatus","getStatus","healthscore","specifications","rpm","maxTemp","power","metrics","totalCollectsUptime","totalUptime","lastUptimeAt","Moment","format","offset","width","src","image"],"sourceRoot":""}