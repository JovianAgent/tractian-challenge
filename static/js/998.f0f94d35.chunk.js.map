{"version":3,"file":"static/js/998.f0f94d35.chunk.js","mappings":"0NAIMA,EAAkC,CACtCC,UAAW,GACXC,SAAU,cAGCC,GAAgBC,EAAAA,EAAAA,eAC3BJ,GAyCF,IAtC2B,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SAC5B,GAAkCC,EAAAA,EAAAA,UAAkBN,EAAqBC,WAAzE,eAAOA,EAAP,KAAkBM,EAAlB,KACA,EAAqEC,EAAAA,UAAwB,GAA7F,eAAgBC,GAAhB,WACA,EAA6DD,EAAAA,SAAe,IAA5E,eAAcE,GAAd,WAuBA,OAlBAF,EAAAA,WAAgB,WACdG,IAAAA,IACgB,gEACbC,MAAK,SAAAC,GACJN,EAAaM,EAASC,MACtBL,GAAW,MAEZM,OAAM,SAAAC,GACL,IAAMC,EACiB,MAAvBD,EAAGH,SAASK,OACR,qBACA,mCACJR,EAASO,GACTR,GAAW,QAGd,KAGD,SAACN,EAAcgB,SAAf,CACEC,MAAO,CACLnB,UAAAA,EACAC,SAzBW,SAACmB,GAAD,OAAqBd,GAAa,SAACe,GAAD,wBAAmBA,GAAnB,CAA8BD,SAsB/E,SAMGhB,M,qKCyEP,UA5GA,WACE,OAAgCkB,EAAAA,EAAAA,YAAWpB,EAAAA,GAAnCF,EAAR,EAAQA,UAMFuB,GANN,EAAmBtB,SAMA,CACjBuB,MAAO,CACLC,KAAM,OAERC,MAAO,CACLC,KAAM,qBAERC,OAAQ,CACN,CACEf,KAAM,CACJ,CACEgB,KAAM,oBACNC,EAhBgB9B,EAAU+B,QAAO,SAAAC,GAAK,MAAqB,gBAAjBA,EAAMf,UAA0BgB,OAiB1EC,MAAO,SAET,CACEL,KAAM,YACNC,EApBY9B,EAAU+B,QAAO,SAAAC,GAAK,MAAqB,YAAjBA,EAAMf,UAAsBgB,OAqBlEC,MAAO,OAET,CACEL,KAAM,sBACNC,EAxBe9B,EAAU+B,QAAO,SAAAC,GAAK,MAAqB,eAAjBA,EAAMf,UAAyBgB,OAyBxEC,MAAO,aAOXC,EAAY,SAAClB,GACjB,IAAImB,EAAgB,GACpB,OAAOnB,GACL,IAAK,UACHmB,EAAgB,YAChB,MAEF,IAAK,aACHA,EAAgB,sBAChB,MAEF,IAAK,cACHA,EAAgB,oBAOpB,OAAOA,GAiBT,OACE,gBAAKC,UAAU,cAAf,UACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAKC,KAAM,EAAX,SACGtC,EAAUuC,KAAI,SAACP,GAAD,OACb,UAAC,IAAD,CACEN,MAAOM,EAAMH,KACbW,OAAO,cAAGC,KAAM,UAAYT,EAAMU,GAAGC,WAA9B,kBACPN,UAAU,aAHZ,WAKE,yBAAI,YACF,iBAAMA,UAAW,UAAYL,EAAMf,OAAnC,SACGkB,EAAUH,EAAMf,cAGrB,yBAAI,kBACF,iBAAMoB,WA9BIO,EA8BsBZ,EAAMa,YA5B9CD,EAAc,GAAkB,YAC3BA,EAAc,GAAkB,iBACtB,gBA0BP,SACGZ,EAAMa,kBAGX,mCAAWb,EAAMc,UACjB,0CA3BKC,EA2BoBf,EAAMgB,QAAQC,aA1BjDC,IAAAA,OAAc,MACKA,GAAAA,CAAOH,GAAMI,OAAO,0BAFzB,IAACJ,EAROH,QAuClB,SAAC,IAAD,CAAKN,KAAM,GAAIc,OAAQ,EAAvB,UACE,0BACE,SAAC,IAAD,CAAUC,WAAYC,IAAYC,QAAShC","sources":["contexts/assetsProvider.tsx","pages/assetList.tsx"],"sourcesContent":["import React, { createContext, useState, FC } from \"react\";\nimport axios from 'axios';\nimport { Asset, AssetList } from \"../types\";\n\nconst contextDefaultValues: AssetList = {\n  assetList: [],\n  addAsset: () => {}\n};\n\nexport const AssetsContext = createContext<AssetList>(\n  contextDefaultValues\n);\n\nconst AssetsProvider: FC = ({ children }) => {\n  const [assetList, setAssetList] = useState<Asset[]>(contextDefaultValues.assetList);\n  const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState<boolean>(true);\n  const [error, setError]: [string, (error: string) => void] = React.useState(\"\");\n\n  const addAsset = (newAsset: Asset) => setAssetList((AssetList) => [...AssetList, newAsset]);\n\n  \n  React.useEffect(() => {\n    axios\n      .get<Asset[]>(\"https://my-json-server.typicode.com/tractian/fake-api/assets\")\n      .then(response => {\n        setAssetList(response.data);\n        setLoading(false);\n      })\n      .catch(ex => {\n        const error =\n        ex.response.status === 404\n          ? \"Resource Not found\"\n          : \"An unexpected error has occurred\";\n        setError(error);\n        setLoading(false);\n    });\n\n  }, []);\n\n  return (\n    <AssetsContext.Provider\n      value={{\n        assetList,\n        addAsset\n      }}\n    >\n      {children}\n    </AssetsContext.Provider>\n  );\n};\n\nexport default AssetsProvider;\n","import React, { useContext } from \"react\";\nimport { AssetsContext } from \"../contexts/assetsProvider\";\nimport 'antd/dist/antd.css';\nimport '../App.css';\nimport { Card, Row, Col } from 'antd';\nimport Moment from 'moment';\nimport { Asset } from \"../types\";\n\nimport Highcharts from \"highcharts/highstock\";\nimport PieChart from \"highcharts-react-official\";\n\nfunction AssetList() {\n  const { assetList, addAsset } = useContext(AssetsContext);\n\n  const assetsInOperation = assetList.filter(asset => asset.status === \"inOperation\").length\n  const assetsInAlert = assetList.filter(asset => asset.status === \"inAlert\").length\n  const assetsInDowntime = assetList.filter(asset => asset.status === \"inDowntime\").length\n\n  const optionsPie = {\n    chart: {\n      type: \"pie\"\n    },\n    title: {\n      text: 'Status dos Ativos'\n    },\n    series: [\n      {\n        data: [\n          {\n            name: 'Em Operação',\n            y: assetsInOperation,\n            color: \"green\"\n          },\n          {\n            name: 'Em Alerta',\n            y: assetsInAlert,\n            color: \"red\"\n          },\n          {\n            name: 'Em Manutenção',\n            y: assetsInDowntime,\n            color: \"grey\"\n          }\n        ]\n      }\n    ]\n  };\n\n  const getStatus = (status: string): string => {\n    let currentStatus = ''\n    switch(status) {\n      case 'inAlert': {\n        currentStatus = 'Em Alerta';\n        break;\n      }\n      case 'inDowntime': {\n        currentStatus = 'Em Manutenção';\n        break;\n      }\n      case 'inOperation': {\n        currentStatus = 'Em Operação';\n        break;\n      }\n      default: {\n        break\n      }\n    }\n    return currentStatus\n  }\n\n  const getHealthClass = (healthScore: number): string => {\n    let healthClass = ''\n    if (healthScore > 75) healthClass = 'health-ok'\n    else if (healthScore > 25) healthClass = 'health-warning'\n    else healthClass = 'health-alert'\n    return healthClass\n  }\n\n  const getDate = (date: Date): string => {\n    Moment.locale('br')\n    let formatedDate = Moment(date).format('DD/MM/YY, hh:mm')\n    return formatedDate\n  }\n\n  return (\n    <div className=\"list-holder\">\n      <Row>\n        <Col span={6}>\n          {assetList.map((asset: Asset) => (\n            <Card\n              title={asset.name}\n              extra={<a href={'assets/' + asset.id.toString()}>More</a>}\n              className='card-asset'\n            >\n              <p>{\"Status: \"}\n                <span className={\"status-\" + asset.status}>\n                  {getStatus(asset.status)}\n                </span>\n              </p>\n              <p>{\"Health Score: \"}\n                <span className={getHealthClass(asset.healthscore)}>\n                  {asset.healthscore}\n                </span>\n              </p>\n              <p>Model: {asset.model}</p>\n              <p>Last Uptime: {getDate(asset.metrics.lastUptimeAt)}</p>\n            </Card>\n          ))}\n        </Col>\n        <Col span={10} offset={4}>\n          <div>\n            <PieChart highcharts={Highcharts} options={optionsPie} />\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default AssetList;\n"],"names":["contextDefaultValues","assetList","addAsset","AssetsContext","createContext","children","useState","setAssetList","React","setLoading","setError","axios","then","response","data","catch","ex","error","status","Provider","value","newAsset","AssetList","useContext","optionsPie","chart","type","title","text","series","name","y","filter","asset","length","color","getStatus","currentStatus","className","span","map","extra","href","id","toString","healthScore","healthscore","model","date","metrics","lastUptimeAt","Moment","format","offset","highcharts","Highcharts","options"],"sourceRoot":""}